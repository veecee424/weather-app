**Note that try and catch blocks are to be used inside a function to perform an operation

**When using axios to make http requests, the returned data from the API is parsed automatically into an object. Note that this 
isn't true when using request module for http requests

**When building an API, input validations should cut across all request parameters (query, params, body)

**When fetching data from an API with axios, invalid request parameters return a response (error response), but with a status code of 400. Take note of
this for error handling purposes

**Inspect API call responses in the terminal to identify properly their relationships with each other, so they can be handled appropriately.

**In error handling using try and catch blocks, it's better to use 'throw new Error ('Error messsage in here')' as it creates an error object with 
error name as 'Error' and error message as the error message specified. This is important for error handling

**To serve static assets (html, css, js) directly from node, it's best practice to create a folder (public preferrably) and tell node to use it by 
specifying app.use(express.static(path.join(__dirname, '..path to the folder'))). NB(path is a node core module and must be required)

**In express.js, 'set' (app.set) allows for setting a value for a given express setting. Eg, changing the name of the views folder to templates, 
and setting express up to use it. ie app.set('views', path.join(__dirname, 'path to the templates folder'))

**handlebars (hbs) is another client-side template engine for node apps.

**Unlike in ejs, to use a partials folder in handlebars, you have to explicitly instruct express to do so using 
'package name'.registerPartials(path,join(__dirname, 'path to partials folder')) 

**For customized errors for page(s) not found, best practice is to have a page dedicated to displaying the error messages; this is so that different 
'page not found' messages can be served for different wrong/undefined url instances 

**The -e flag is used to set up nodemon to refresh the server after changes have been effected on other file extensions (eg html, ejs, hbs).. 
It is used thus 'nodemon app.js -e ejs,html,hbs'